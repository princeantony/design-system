import { Component, OnInit } from '@angular/core';
import _ from 'lodash';
import { NgxSpinnerService } from 'ngx-spinner';

import { ActivatedRoute, Router } from '@angular/router';
import { PayAdminGlobalState } from '../../shared/store/pay-admin-global.store';
import { APP_CONST } from '../../shared/constants/app.constants';
import { ReportService } from './report.service';
import { FormControl, FormBuilder } from '@angular/forms';


@Component({
  selector: 'app-report',
  templateUrl: './report.component.html'
})
export class PayAdminReportComponent implements OnInit {
  reportColumns: any;
  reportData: any;
  reportNames: any;
  reportForm: any;
  reportHeadings: any;
  reportDetails: any;
  style;
  rowStyle;
  gridStyle;
  constructor(
private reportService: ReportService,
    private router: Router,
    private spinner: NgxSpinnerService,
    private fb: FormBuilder
  ) {
    this.gridStyle = { width: 400, height: 200 };
    this.style = { width: '100%' };
    this.rowStyle = { color: '#333333' };
  }
  ngOnInit() {
    this.reportForm = this.fb.group({
      reportList: new FormControl()}
    )
    this.getReportNames();
    //this.getReport();
  }

  getReportNames(): void {
    this.spinner.show();
    this.reportService.getReportNames(PayAdminGlobalState.planNumber).subscribe(
      names => {
        if (names.status === APP_CONST.SUCCESS) {
          this.reportNames = names.data;
          console.log(this.reportNames,names.data )
          this.spinner.hide();
        } else {
          console.log('Error in report name', names);
          this.spinner.hide();
        }
      },
      err => {
        console.log('Error in roport name from service', err);
        this.spinner.hide();
      }
    );
  }

  getReport(reportName: string): void {
    this.reportService.getReport(PayAdminGlobalState.planNumber).subscribe(
      report => {
        this.spinner.hide();
        if (report.status === APP_CONST.SUCCESS) {
          this.reportData = report.data.content;
          this.reportHeadings = report.data.headers ;
          this.reportDetails = {
                          'planName': report.data.planName,
                          'runDa  te': report.data.runDate,
                          'runTime': report.data.runTime,
                          'attention': report.data.attention,
                          'reportName': report.data.reportName};
          this.createGridHeadings();
        } else {
          console.log('Error in report reportData', report);
                  this.spinner.hide();
        }
      },
      err => {
        console.log('Error in roport name from service', err);
        this.spinner.hide();
      }
    );
  }
  createGridHeadings()
  {
const newHeadings = [];
    this.reportHeadings.forEach((heading, index) => {
      newHeadings.push(  { headerName: heading.name, field: heading.id, width: 170 });
    });
    this.reportColumns = newHeadings;
    }


}
============================

  getSelectedRow(clickedRow) {
    const item = {};
    this.showConfirm = false;
    this.currentCheckBox = null;
    let showOnlyOneMsg = false;
    let canAddToSource = false;
    let showRothAert = false;
    let showPretaxAlert = false;
    item[clickedRow.item.fieldName] = clickedRow.item.fieldValue;
    if (clickedRow.item.gridName === 'money') {
      // if the user clicked on any one of the checkbox in moneysource grid
      if (clickedRow.item.fieldName === 'deferralCatchUp') {
        // if the user click on the 'differral catchup' column
        if (this.moneySourceData[clickedRow.item.rowIndex].rothSource) {
          // if the selected row is having Roth property true
          if (clickedRow.item.fieldValue) {
            if (this.rothCount !== 1) {
              if (this.moneySourceData[clickedRow.item.rowIndex].exclude) {
                this.showConfirm = true;
              } else {
                this.rothCount = 1; // roth reached maximum
                this.rothSelectedIndex = clickedRow.item.rowIndex;
              }
            } else {
              clickedRow.item.obj.checked = false; // not allow to be checked on
              showRothAert = true;
            }
          } else {
            this.rothCount = 0; // if user uncheck; always reset to 1
            this.rothSelectedIndex = -1;
          }
        } else if (this.moneySourceData[clickedRow.item.rowIndex].preTaxSource) {
          // if the selected row is having pre tax property true
          if (clickedRow.item.fieldValue) {
            if (this.preTaxCount !== 1) {
                if (this.moneySourceData[clickedRow.item.rowIndex].exclude) {
                  this.showConfirm = true;
                } else {
                  this.preTaxCount = 1; // pre-tax reached maximum
                  this.preTaxSelectedIndex = clickedRow.item.rowIndex;
                }
              } else {
                clickedRow.item.obj.checked = false; // not allow to be checked on
                showPretaxAlert = true;
              }
          } else {
            this.preTaxCount = 0; // if user uncheck; reset to 0
            this.preTaxSelectedIndex = -1;
          }
        } else if (clickedRow.item.fieldValue) {
          // if user clicked on the 'differral catchup' column apart from Roth or Pre-tax
          clickedRow.item.obj.checked = false; // should not allow to checked on
          showOnlyOneMsg = true;
        }
        if (showOnlyOneMsg) {
        this.showAlert('Pre-tax - Roth', 'Only Pre-tax and Roth sources can be elected for Catch-up');
        } else if (showRothAert) {
          this.showAlert('Roth', 'Only one Roth sources can be elected for Catch-up');
        } else if (showPretaxAlert) {
          this.showAlert('Pre-tax', 'Only one Pre-tax source can be elected for Catch-up');
        } else if (this.showConfirm) {
          this.currentCheckBox = clickedRow.item;
          this.confirmAlert();
        } else {
          // if user select Roth or/and Pre-tax checkboxes, then update the main object which is used to bind the moneysouce grid
          canAddToSource =  true;
        }
      } else if (
        clickedRow.item.fieldName === 'exclude' && clickedRow.item.fieldValue) {
        if (
          this.rothSelectedIndex === clickedRow.item.rowIndex ||
          this.preTaxSelectedIndex === clickedRow.item.rowIndex ) {
            this.currentCheckBox = clickedRow.item;
            canAddToSource = false;
          this.confirmAlert();
        } else {
          canAddToSource = true;
        }
      } else {
        canAddToSource = true;
      }
      if(canAddToSource){
        Object.assign(this.moneySourceData[clickedRow.item.rowIndex], item);
      }
    } else {
      // if user select any checkboxes in the investment grid, then update the main object which is used to bind the investment grid
      Object.assign(this.investmentData[clickedRow.item.rowIndex], item);
    }
  }
  confirmAlert() {
    this.isConfirm = true;
    this.showAlert(
      'Confirm Exclude',
      'Review the Catch-up deferral check boxes and the excluded sources. Both are checked for the same source.  If correct click OK to continue.'
    );
  }
  showAlert(title, content) {
    this.alertMessage.title = title;
    this.alertMessage.content = content;
    this.modalService.open('confirm-modal');
  }
